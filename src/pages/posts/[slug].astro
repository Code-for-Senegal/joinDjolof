---
import { SITE } from "src/config";
import Posts from "@layouts/Posts.astro";
import PostDetails from "@layouts/PostDetails.astro";
import getSortedPosts from "@utils/getSortedPosts";
import getPageNumbers from "@utils/getPageNumbers";
import type { MarkdownInstance } from "astro";
import type { Frontmatter } from "src/types";
import slugify from "@utils/slugify";

export interface Props {
  post: MarkdownInstance<Frontmatter>;
}

type PostResult = {
  params: {
    slug: string | number;
  };
  props?: {
    post: MarkdownInstance<Record<string, any>>;
  };
}[];

type PagePaths = {
  params: {
    slug: string;
  };
}[];

export async function getStaticPaths() {
  const posts = await Astro.glob<Frontmatter>("../../contents/**/*.md");

  let postResult: PostResult = posts.map(post => {
    return {
      params: {
        slug: slugify(post.frontmatter),
      },
      props: {
        post,
      },
    };
  });

  const pagePaths: PagePaths = getPageNumbers(posts.length).map(pageNum => ({
    params: { slug: String(pageNum) },
  }));

  return [...postResult, ...pagePaths];
}

const { slug } = Astro.params;
const { post } = Astro.props;

const posts = await Astro.glob<Frontmatter>("../../contents/**/*.md");

const sortedPosts = getSortedPosts(posts);

const totalPages = getPageNumbers(sortedPosts.length);

const currentPage =
  slug && !isNaN(Number(slug)) && totalPages.includes(Number(slug))
    ? Number(slug)
    : 0;
const lastPost = currentPage * SITE.postPerPage;
const startPost = lastPost - SITE.postPerPage;

const paginatedPosts = sortedPosts.slice(startPost, lastPost);
---

{
  post ? (
    <PostDetails post={post} />
  ) : (
    <Posts
      posts={paginatedPosts}
      pageNum={currentPage}
      totalPages={totalPages.length}
    />
  )
}
